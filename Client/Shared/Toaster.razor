@inherits FluxorComponent

@using FluxorBlazor.Client.Features.Counter
@using FluxorBlazor.Client.Features.Weather
@using FluxorBlazor.Client.Features.Hubs.CounterHub

@inject IToastService toastService

@code {
    protected override void OnInitialized()
    {
        SubscribeToAction<WeatherSetForecastsAction>(ShowWeatherToast);

        SubscribeToAction<CounterLoadStateSuccessAction>(ShowCounterLoadStateSuccessToast);
        SubscribeToAction<CounterLoadStateFailureAction>(ShowCounterLoadStateFailureToast);

        SubscribeToAction<CounterPersistStateSuccessAction>(ShowCounterPersistStateSuccessToast);
        SubscribeToAction<CounterPersistStateFailureAction>(ShowCounterPersistStateFailureToast);

        SubscribeToAction<CounterClearStateSuccessAction>(ShowCounterClearStateSuccessToast);
        SubscribeToAction<CounterClearStateFailureAction>(ShowCounterClearStateFailureToast);

        SubscribeToAction<CounterHubSetConnectedAction>(ShowHubConnectedToast);
        SubscribeToAction<CounterHubReceiveCountAction>(ShowCountReceivedToast);
        SubscribeToAction<CounterHubSendCountFailedAction>(ShowCountReceivedFailedToast);

        base.OnInitialized();
    }

    private void ShowWeatherToast(WeatherSetForecastsAction action)
    {
        toastService.ShowInfo("Weather Forecasts have been updated!");
    }

    private void ShowCounterLoadStateSuccessToast(CounterLoadStateSuccessAction action)
    {
        toastService.ShowSuccess("CounterState loaded!");
    }

    private void ShowCounterLoadStateFailureToast(CounterLoadStateFailureAction action)
    {
        toastService.ShowError($"Error loading CounterState: {action.ErrorMessage}");
    }

    private void ShowCounterPersistStateSuccessToast(CounterPersistStateSuccessAction action)
    {
        toastService.ShowSuccess("CounterState saved!");
    }

    private void ShowCounterPersistStateFailureToast(CounterPersistStateFailureAction action)
    {
        toastService.ShowError($"Error loading CounterState: {action.ErrorMessage}");
    }

    private void ShowCounterClearStateSuccessToast(CounterClearStateSuccessAction action)
    {
        toastService.ShowSuccess("CounterState cleared!");
    }

    private void ShowCounterClearStateFailureToast(CounterClearStateFailureAction action)
    {
        toastService.ShowError($"Error clearing CounterState: {action.ErrorMessage}");
    }

    private void ShowCountReceivedToast(CounterHubReceiveCountAction action)
    {
        toastService.ShowInfo($"Count received: {action.Count}");
    }

    private void ShowCountReceivedFailedToast(CounterHubSendCountFailedAction action)
    {
        toastService.ShowError($"Count could not be broadcast: {action.Message}");
    }

    private void ShowHubConnectedToast(CounterHubSetConnectedAction action)
    {
        if (action.Connected)
        {
            toastService.ShowSuccess($"CounterHub connected!");
        }
        else
        {
            toastService.ShowError($"CounterHub disconnected!");
        }
    }
}